type token =
  | INT of (int)
  | PLUS
  | MINUS
  | MUL
  | DIV
  | GT
  | LT
  | EQ
  | NE
  | LAM
  | DOT
  | LET
  | IN
  | IF
  | THEN
  | ELSE
  | BOOL of (bool)
  | IDEN of (string)
  | EOL
  | EOF
  | END
  | LP
  | RP
  | ADDL
  | REML
  | GETL
  | COMMA
  | HIGH
  | LOW

open Parsing;;
# 2 "parser.mly"
open Syntax;;
# 36 "parser.ml"
let yytransl_const = [|
  258 (* PLUS *);
  259 (* MINUS *);
  260 (* MUL *);
  261 (* DIV *);
  262 (* GT *);
  263 (* LT *);
  264 (* EQ *);
  265 (* NE *);
  266 (* LAM *);
  267 (* DOT *);
  268 (* LET *);
  269 (* IN *);
  270 (* IF *);
  271 (* THEN *);
  272 (* ELSE *);
  275 (* EOL *);
    0 (* EOF *);
  276 (* END *);
  277 (* LP *);
  278 (* RP *);
  279 (* ADDL *);
  280 (* REML *);
  281 (* GETL *);
  282 (* COMMA *);
  283 (* HIGH *);
  284 (* LOW *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  273 (* BOOL *);
  274 (* IDEN *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\003\000\003\000\
\000\000"

let yylen = "\002\000\
\002\000\006\000\004\000\004\000\003\000\001\000\001\000\001\000\
\004\000\002\000\001\000\001\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\006\000\006\000\001\000\002\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\011\000\000\000\000\000\000\000\012\000\008\000\
\000\000\000\000\000\000\000\000\006\000\007\000\025\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\000\000\000\000\024\000\000\000\000\000\005\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\003\000\004\000\
\000\000\000\000\000\000\000\000\000\000\002\000"

let yydgoto = "\002\000\
\015\000\034\000\019\000"

let yysindex = "\001\000\
\125\000\000\000\000\000\239\254\241\254\125\000\000\000\000\000\
\125\000\244\254\245\254\249\254\000\000\000\000\000\000\057\255\
\001\255\241\254\007\255\085\255\113\255\125\000\125\000\125\000\
\125\000\125\000\125\000\125\000\125\000\125\000\125\000\125\000\
\000\000\053\000\125\000\000\000\125\000\125\000\000\000\141\255\
\169\255\197\255\106\000\106\000\081\000\081\000\125\000\125\000\
\125\000\125\000\053\000\225\255\253\255\125\000\000\000\000\000\
\125\000\125\000\025\000\053\000\053\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\008\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\247\254\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\252\000\021\001\028\255\035\001\152\000\177\000\
\202\000\227\000\043\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\051\001\059\001\000\000"

let yygindex = "\000\000\
\000\000\255\255\002\000"

let yytablesize = 597
let yytable = "\016\000\
\017\000\001\000\018\000\010\000\020\000\010\000\010\000\021\000\
\022\000\023\000\010\000\035\000\010\000\024\000\037\000\023\000\
\010\000\000\000\000\000\036\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\047\000\048\000\049\000\050\000\015\000\
\015\000\051\000\000\000\052\000\053\000\000\000\000\000\000\000\
\015\000\000\000\015\000\015\000\000\000\000\000\000\000\015\000\
\000\000\015\000\000\000\000\000\059\000\015\000\000\000\060\000\
\061\000\003\000\025\000\026\000\027\000\028\000\029\000\030\000\
\031\000\032\000\004\000\000\000\005\000\000\000\006\000\000\000\
\000\000\007\000\008\000\000\000\033\000\009\000\000\000\010\000\
\011\000\012\000\000\000\013\000\014\000\003\000\025\000\026\000\
\027\000\028\000\029\000\030\000\031\000\032\000\004\000\000\000\
\005\000\000\000\006\000\038\000\000\000\007\000\008\000\000\000\
\000\000\009\000\000\000\010\000\011\000\012\000\000\000\013\000\
\014\000\003\000\025\000\026\000\027\000\028\000\029\000\030\000\
\031\000\032\000\004\000\000\000\005\000\000\000\006\000\000\000\
\000\000\007\000\008\000\000\000\000\000\009\000\039\000\010\000\
\011\000\012\000\000\000\013\000\014\000\003\000\025\000\026\000\
\027\000\028\000\029\000\030\000\031\000\032\000\004\000\000\000\
\005\000\000\000\006\000\000\000\000\000\007\000\008\000\000\000\
\000\000\009\000\000\000\010\000\011\000\012\000\054\000\013\000\
\014\000\003\000\025\000\026\000\027\000\028\000\029\000\030\000\
\031\000\032\000\004\000\000\000\005\000\000\000\006\000\000\000\
\000\000\007\000\008\000\000\000\000\000\009\000\055\000\010\000\
\011\000\012\000\000\000\013\000\014\000\003\000\025\000\026\000\
\027\000\028\000\029\000\030\000\031\000\032\000\004\000\000\000\
\005\000\000\000\006\000\000\000\000\000\007\000\008\000\000\000\
\000\000\009\000\056\000\010\000\011\000\012\000\000\000\013\000\
\014\000\003\000\025\000\026\000\027\000\028\000\029\000\030\000\
\031\000\032\000\004\000\000\000\005\000\057\000\006\000\000\000\
\000\000\007\000\008\000\000\000\000\000\009\000\000\000\010\000\
\011\000\012\000\000\000\013\000\014\000\003\000\025\000\026\000\
\027\000\028\000\029\000\030\000\031\000\032\000\004\000\000\000\
\005\000\000\000\006\000\000\000\058\000\007\000\008\000\000\000\
\000\000\009\000\000\000\010\000\011\000\012\000\000\000\013\000\
\014\000\003\000\025\000\026\000\027\000\028\000\029\000\030\000\
\031\000\032\000\004\000\000\000\005\000\000\000\006\000\000\000\
\000\000\007\000\008\000\000\000\000\000\009\000\062\000\010\000\
\011\000\012\000\000\000\013\000\014\000\003\000\025\000\026\000\
\027\000\028\000\029\000\030\000\031\000\032\000\004\000\000\000\
\005\000\000\000\006\000\000\000\000\000\007\000\008\000\000\000\
\000\000\009\000\000\000\010\000\011\000\012\000\000\000\013\000\
\014\000\003\000\025\000\026\000\000\000\000\000\029\000\030\000\
\031\000\032\000\004\000\000\000\005\000\000\000\006\000\000\000\
\000\000\007\000\008\000\000\000\000\000\009\000\000\000\010\000\
\011\000\012\000\003\000\013\000\014\000\000\000\000\000\029\000\
\030\000\031\000\032\000\004\000\000\000\005\000\000\000\006\000\
\000\000\000\000\007\000\008\000\000\000\003\000\009\000\000\000\
\010\000\011\000\012\000\000\000\013\000\014\000\004\000\000\000\
\005\000\000\000\006\000\000\000\000\000\007\000\008\000\000\000\
\000\000\009\000\000\000\010\000\011\000\012\000\000\000\013\000\
\014\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\000\000\000\000\000\000\017\000\000\000\017\000\017\000\
\000\000\000\000\000\000\017\000\000\000\017\000\000\000\000\000\
\000\000\017\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\000\000\000\000\000\000\018\000\000\000\018\000\
\018\000\000\000\000\000\000\000\018\000\000\000\018\000\000\000\
\000\000\000\000\018\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\000\000\000\000\000\000\019\000\000\000\
\019\000\019\000\000\000\000\000\000\000\019\000\000\000\019\000\
\000\000\000\000\000\000\019\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\000\000\000\000\000\000\020\000\
\000\000\020\000\020\000\000\000\000\000\000\000\020\000\000\000\
\020\000\000\000\000\000\000\000\020\000\013\000\013\000\013\000\
\013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\013\000\000\000\013\000\013\000\000\000\000\000\000\000\013\000\
\000\000\013\000\000\000\000\000\000\000\013\000\014\000\014\000\
\014\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\014\000\000\000\014\000\014\000\000\000\016\000\016\000\
\014\000\000\000\014\000\000\000\000\000\000\000\014\000\016\000\
\000\000\016\000\016\000\000\000\000\000\000\000\016\000\009\000\
\016\000\009\000\009\000\000\000\016\000\000\000\009\000\021\000\
\009\000\021\000\021\000\000\000\009\000\000\000\021\000\022\000\
\021\000\022\000\022\000\000\000\021\000\000\000\022\000\000\000\
\022\000\000\000\000\000\000\000\022\000"

let yycheck = "\001\000\
\018\001\001\000\018\001\013\001\006\000\015\001\016\001\009\000\
\021\001\021\001\020\001\011\001\022\001\021\001\008\001\008\001\
\026\001\255\255\255\255\018\000\022\000\023\000\024\000\025\000\
\026\000\027\000\028\000\029\000\030\000\031\000\032\000\004\001\
\005\001\035\000\255\255\037\000\038\000\255\255\255\255\255\255\
\013\001\255\255\015\001\016\001\255\255\255\255\255\255\020\001\
\255\255\022\001\255\255\255\255\054\000\026\001\255\255\057\000\
\058\000\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\255\255\012\001\255\255\014\001\255\255\
\255\255\017\001\018\001\255\255\020\001\021\001\255\255\023\001\
\024\001\025\001\255\255\027\001\028\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\255\255\
\012\001\255\255\014\001\015\001\255\255\017\001\018\001\255\255\
\255\255\021\001\255\255\023\001\024\001\025\001\255\255\027\001\
\028\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\255\255\012\001\255\255\014\001\255\255\
\255\255\017\001\018\001\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\255\255\027\001\028\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\255\255\
\012\001\255\255\014\001\255\255\255\255\017\001\018\001\255\255\
\255\255\021\001\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\255\255\012\001\255\255\014\001\255\255\
\255\255\017\001\018\001\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\255\255\027\001\028\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\255\255\
\012\001\255\255\014\001\255\255\255\255\017\001\018\001\255\255\
\255\255\021\001\022\001\023\001\024\001\025\001\255\255\027\001\
\028\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\255\255\012\001\013\001\014\001\255\255\
\255\255\017\001\018\001\255\255\255\255\021\001\255\255\023\001\
\024\001\025\001\255\255\027\001\028\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\255\255\
\012\001\255\255\014\001\255\255\016\001\017\001\018\001\255\255\
\255\255\021\001\255\255\023\001\024\001\025\001\255\255\027\001\
\028\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\255\255\012\001\255\255\014\001\255\255\
\255\255\017\001\018\001\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\255\255\027\001\028\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\255\255\
\012\001\255\255\014\001\255\255\255\255\017\001\018\001\255\255\
\255\255\021\001\255\255\023\001\024\001\025\001\255\255\027\001\
\028\001\001\001\002\001\003\001\255\255\255\255\006\001\007\001\
\008\001\009\001\010\001\255\255\012\001\255\255\014\001\255\255\
\255\255\017\001\018\001\255\255\255\255\021\001\255\255\023\001\
\024\001\025\001\001\001\027\001\028\001\255\255\255\255\006\001\
\007\001\008\001\009\001\010\001\255\255\012\001\255\255\014\001\
\255\255\255\255\017\001\018\001\255\255\001\001\021\001\255\255\
\023\001\024\001\025\001\255\255\027\001\028\001\010\001\255\255\
\012\001\255\255\014\001\255\255\255\255\017\001\018\001\255\255\
\255\255\021\001\255\255\023\001\024\001\025\001\255\255\027\001\
\028\001\002\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\255\255\255\255\255\255\013\001\255\255\015\001\016\001\
\255\255\255\255\255\255\020\001\255\255\022\001\255\255\255\255\
\255\255\026\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\255\255\255\255\255\255\013\001\255\255\015\001\
\016\001\255\255\255\255\255\255\020\001\255\255\022\001\255\255\
\255\255\255\255\026\001\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\255\255\255\255\255\255\013\001\255\255\
\015\001\016\001\255\255\255\255\255\255\020\001\255\255\022\001\
\255\255\255\255\255\255\026\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\255\255\255\255\255\255\013\001\
\255\255\015\001\016\001\255\255\255\255\255\255\020\001\255\255\
\022\001\255\255\255\255\255\255\026\001\002\001\003\001\004\001\
\005\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\013\001\255\255\015\001\016\001\255\255\255\255\255\255\020\001\
\255\255\022\001\255\255\255\255\255\255\026\001\002\001\003\001\
\004\001\005\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\013\001\255\255\015\001\016\001\255\255\004\001\005\001\
\020\001\255\255\022\001\255\255\255\255\255\255\026\001\013\001\
\255\255\015\001\016\001\255\255\255\255\255\255\020\001\013\001\
\022\001\015\001\016\001\255\255\026\001\255\255\020\001\013\001\
\022\001\015\001\016\001\255\255\026\001\255\255\020\001\013\001\
\022\001\015\001\016\001\255\255\026\001\255\255\020\001\255\255\
\022\001\255\255\255\255\255\255\026\001"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  MUL\000\
  DIV\000\
  GT\000\
  LT\000\
  EQ\000\
  NE\000\
  LAM\000\
  DOT\000\
  LET\000\
  IN\000\
  IF\000\
  THEN\000\
  ELSE\000\
  EOL\000\
  EOF\000\
  END\000\
  LP\000\
  RP\000\
  ADDL\000\
  REML\000\
  GETL\000\
  COMMA\000\
  HIGH\000\
  LOW\000\
  "

let yynames_block = "\
  INT\000\
  BOOL\000\
  IDEN\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.expr) in
    Obj.repr(
# 29 "parser.mly"
                            ( _1 )
# 317 "parser.ml"
               : Syntax.expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Syntax.expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Syntax.expr) in
    Obj.repr(
# 32 "parser.mly"
                                 ( App(App(addLab, _3), _5) )
# 325 "parser.ml"
               : Syntax.expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Syntax.expr) in
    Obj.repr(
# 33 "parser.mly"
                      ( App(remLab, _3) )
# 332 "parser.ml"
               : Syntax.expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Syntax.expr) in
    Obj.repr(
# 34 "parser.mly"
                      ( App(getLab, _3) )
# 339 "parser.ml"
               : Syntax.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.expr) in
    Obj.repr(
# 35 "parser.mly"
                  ( _2 )
# 346 "parser.ml"
               : Syntax.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 36 "parser.mly"
            ( Const {name = Lab "high"; arity = 0; constr = false} )
# 352 "parser.ml"
               : Syntax.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 37 "parser.mly"
           ( Const {name = Lab "low"; arity = 0; constr = false} )
# 358 "parser.ml"
               : Syntax.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 38 "parser.mly"
            ( Var _1 )
# 365 "parser.ml"
               : Syntax.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.expr) in
    Obj.repr(
# 39 "parser.mly"
                        ( Fun(_2,_4) )
# 373 "parser.ml"
               : Syntax.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.expr) in
    Obj.repr(
# 40 "parser.mly"
                  ( App(_1, _2) )
# 381 "parser.ml"
               : Syntax.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 41 "parser.mly"
           ( int (_1) )
# 388 "parser.ml"
               : Syntax.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 42 "parser.mly"
            ( bool(_1) )
# 395 "parser.ml"
               : Syntax.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.expr) in
    Obj.repr(
# 43 "parser.mly"
                      ( App(App(plus, _1), _3) )
# 403 "parser.ml"
               : Syntax.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.expr) in
    Obj.repr(
# 44 "parser.mly"
                       ( App(App(minus, _1), _3) )
# 411 "parser.ml"
               : Syntax.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.expr) in
    Obj.repr(
# 45 "parser.mly"
                     ( App(App(times, _1), _3) )
# 419 "parser.ml"
               : Syntax.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.expr) in
    Obj.repr(
# 46 "parser.mly"
                     ( App(App(div, _1), _3) )
# 427 "parser.ml"
               : Syntax.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.expr) in
    Obj.repr(
# 47 "parser.mly"
                    ( App(App(gt, _1), _3) )
# 435 "parser.ml"
               : Syntax.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.expr) in
    Obj.repr(
# 48 "parser.mly"
                    ( App(App(lt, _1), _3) )
# 443 "parser.ml"
               : Syntax.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.expr) in
    Obj.repr(
# 49 "parser.mly"
                    ( App(App(eq, _1), _3) )
# 451 "parser.ml"
               : Syntax.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.expr) in
    Obj.repr(
# 50 "parser.mly"
                    ( App(App(ne, _1), _3) )
# 459 "parser.ml"
               : Syntax.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'idenList) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.expr) in
    Obj.repr(
# 51 "parser.mly"
                                  ( Let(_2, _4, _6) )
# 468 "parser.ml"
               : Syntax.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Syntax.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.expr) in
    Obj.repr(
# 52 "parser.mly"
                                  ( App(App(App(branch, _2), _4), _6) )
# 477 "parser.ml"
               : Syntax.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 57 "parser.mly"
             ( _1::[] )
# 484 "parser.ml"
               : 'idenList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'idenList) in
    Obj.repr(
# 58 "parser.mly"
                    ( _1::_2 )
# 492 "parser.ml"
               : 'idenList))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.expr)
